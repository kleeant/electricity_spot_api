/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/healthcheck': {
    /** @description api healthcheck */
    get: operations['getHealthCheck']
  }
  '/spotPrice': {
    /** @description get a test */
    get: operations['getTest']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @default 0 */
    PaginationIndex: string
    /**
     * @default 50
     * @example 50
     */
    PaginationLimit: string
    Pagination: {
      index?: components['schemas']['PaginationIndex']
      limit?: components['schemas']['PaginationLimit']
      /** @default null */
      next?: string | null
    }
    ErrorList: {
      errors?: Array<components['schemas']['Error']>
    }
    Error: {
      /** @example Service error occured */
      description?: string
    }
    TSpotPriceMeta: {
      /** @example c/Kwh */
      price_unit: string
      /** @example 25 */
      tax: number
    }
    TSpotPrice: {
      /**
       * Format: date-time
       * @example timestamp
       */
      timestamp: string
      /** @example 12.16 */
      price: string
      /** @example 15.20 */
      price_with_tax: string
    }
    TSpotPriceSummary: {
      meta: components['schemas']['TSpotPriceMeta']
      prices: Array<components['schemas']['TSpotPrice']>
    }
  }
  responses: {
    /** @description API endpoint not found */
    NotFound: {
      content: {
        'application/json': components['schemas']['ErrorList']
      }
    }
    /** @description Request failed with invalid request content */
    ValidationFailure: {
      content: {
        'application/json': components['schemas']['ErrorList']
      }
    }
  }
  parameters: {
    query_date_from: string
    query_date_to: string
    /** @description which item is the first for the page? */
    pagination_index?: components['schemas']['PaginationIndex']
    /** @description how many per page */
    pagination_limit?: components['schemas']['PaginationLimit']
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {

  /** @description api healthcheck */
  getHealthCheck: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              /** @example ok */
              uptime?: string
              /** @example ok */
              status?: string
              /** @example ok */
              version?: string
              /**
               * Format: date-time
               * @example timestamp
               */
              timestamp?: string
            }
          }
        }
      }
      404: components['responses']['NotFound']
      /** @description unexpected internal error occured */
      500: {
        content: never
      }
    }
  }
  /** @description get a test */
  getTest: {
    parameters: {
      query: {
        date_from: components['parameters']['query_date_from']
        date_to: components['parameters']['query_date_to']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: Array<components['schemas']['TSpotPriceSummary']>
            _paging?: components['schemas']['Pagination']
          }
        }
      }
      400: components['responses']['ValidationFailure']
      404: components['responses']['NotFound']
      /** @description unexpected internal error occured */
      500: {
        content: never
      }
    }
  }
}
